<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
        <title>Tiến Phát</title>
        <description>Tiến Phát - Tiệm khóa Tiến Phát</description>
        <link>http://suakhoabmt.github.io</link>
        <atom:link href="http://suakhoabmt.github.io/rss.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Sun, 28 Feb 2016 22:53:00 +0700</lastBuildDate>
        <pubDate>Sun, 28 Feb 2016 22:53:00 +0700</pubDate>
        <ttl>60</ttl>


        <item>
                <title>Làm gì khi mất hết chìa khóa xe ô tô?</title>
                <description>
&lt;p&gt;Nếu bị mất chìa khóa xe ô tô (&lt;a href=&quot;/2015/04/25/xe-khong-the-khoi-dong&quot;&gt;đọc đề tài này trước&lt;/a&gt;) thì làm chìa khóa thay thế thông thường cần ít nhất hai thành phần - Phôi chìa khóa đã được cắt khớp với ổ khóa và chip điện tử (Transponder) (&lt;a href=&quot;/2015/01/28/cong-nghe-chip-dien-tu-xe-hoi&quot;&gt;đọc thêm ở đây&lt;/a&gt;) được lập trình (thì xe sẽ khởi động được).&lt;/p&gt;

&lt;p&gt;Thành phần thứ 3 có thể được lập trình là điều khiển từ xa, mặc dù đây thông thường chỉ là một tính năng sang trọng và không nhất thiết để có thể vào được xe và khởi động.&lt;/p&gt;

&lt;p&gt;Nếu bạn mất hết chìa khóa xe và không còn chìa nào dự phòng, đừng tuyệt vọng. Nhiều thợ sửa khóa ô tô và nhà phân phối xe có thể làm chìa khóa cho xe bạn dựa vào số khung xe hoặc làm trực tiếp trên xe của bạn. Bạn có thể thấy số khung ở trong đăng kiểm xe và có thể phải cung cấp nó cũng như chứng minh bạn là chủ nhân của chiếc xe.&lt;/p&gt;

&lt;p&gt;Để lập trình chip điện tử cho chìa khóa (Transponder chip) nhà sản xuất thường cung cấp một thẻ mã khi mua mới xe. Thẻ này chứa mã thông tin duy nhất và thường dudwocj dấu ở dưới một lớp che để duy nhất chủ sở hữu của phương tiện mới có thể thấy được. Những nhà phân phối xe và thợ sửa khóa ô tô thường sẽ yêu cầu mã này để họ có thể lập trình cho chip điện tử cho xe.&lt;/p&gt;

&lt;p&gt;Ngay cả khi không có mã thẻ này một số thợ khóa ô tô có thể giúp bạn nhưng thông thường sẽ đòi hỏi nhiều hơn - để thiết lập lại bộ nhận Transponder hoặc ECU trong xe.&lt;/p&gt;

&lt;p&gt;Chìa khóa của tôi là một khối đặc và không có pin cho điều khiển vì vậy không thể có một chip điện tử trong nó?&lt;/p&gt;

&lt;p&gt;Chỉ vì không có không có chìa khóa điều khiển với pin không có nghĩa là chìa khóa không có chip điện tử (Transponder chip). Chip điện tử không cần dùng pin vì nó sẽ được nạp năng lượng khi đưa chìa khóa vào ổ khóa đề của xe. Trong một chìa khóa không có điều khiển từ xa, chip điện tử sẽ được gắn ở bên trong lớp nhựa.&lt;/p&gt;

&lt;p&gt;Luôn luôn kiểm tra nhiều cách trước khi thực hiện các bước bạo lực như ai đó phá khóa xe. Rất hiếm trường hợp một chiếc xe bị khóa bị đập vỡ kiếng để khởi động chiếc xe.&lt;/p&gt;

&lt;p&gt;Bài gốc: http://www.programyourkeys.com/Lost_Car_Keys.html&lt;/p&gt;
</description>
                <link>http://suakhoabmt.github.io/2016/02/28/mat-het-chia-khoa-o-to</link>
                <guid>http://suakhoabmt.github.io/2016/02/28/mat-het-chia-khoa-o-to</guid>
                <pubDate>Sun, 28 Feb 2016 00:00:00 +0700</pubDate>
        </item>

        <item>
                <title>Xe không thể khởi động?</title>
                <description>
&lt;p&gt;Xe của bạn không thể khởi động có thể là vì hệ thống khóa động (Immobiliser) của xe. Sau đây là một số cách để chẩn đoán vấn đề:&lt;/p&gt;

&lt;p&gt;Kiểm tra sơ qua một vài thứ sau trước - Xăng trong xe còn không? Đèn báo năng lượng bình có hoạt động không? Kết nối năng lượng của bình có bị ngắt không?&lt;/p&gt;

&lt;p&gt;Nếu động động cơ chỉ nổ một chút như chuẩn bị khởi động xe nhưng mà vẫn không khởi động được hoàn toàn, khởi động và tiếp tục nổ chậm hoặc tắt từ từ thì đây không phải là vấn đề liên quan đến hệ thống Immobiliser.&lt;/p&gt;

&lt;p&gt;Nếu động cơ không hoạt động luôn (không có âm thanh gì khi bật chìa khóa lên) hoặc khởi động vẫn nghe tiếng nổ nhưng động cơ của xe không hoạt động thì xe bạn có thể bị vấn để ở hệ thống Immobiliser. Nhiều xe hơi đời mới có đèn cảnh báo hệ thống Immobiliser trên bảng điều khiển (thường có hình chìa khóa) - Kiểm tra sổ hướng dẫn. Nhưng một số xe lại không có đèn. Một số xe lại không có hệ thống Immobiliser (nhà sản xuất không lắp đặt) thì sẽ không có đèn báo hệ thống Immobiliser.&lt;/p&gt;

&lt;p&gt;Làm theo như sau:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Khóa xe bằng cách sử dụng từ xa nếu được trang bị và mở lại. Điều này có thể thiết lập lại các immobilizer. Sau đó thử và khởi động xe.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kiểm tra sổ tay của chủ sở hữu của chiếc xe của bạn và tìm phần khởi động lại nhiên liệu. Nhiều xe có một hệ thống an toàn sẽ ngắt nguồn cung cấp nhiên liệu trong trường hợp bị va chạm. Vấn đề này này đôi khi bị ngắt vô tình. Cách giải quyết thông thường là nhấn một nút nằm (hoặc dưới) nắp ca-pô (mui xe) hoặc dưới bảng đồng hồ.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tiếp theo, tìm chìa khóa dự phòng và thử chúng. Điều này sẽ loại trừ các trường hợp không khởi động được do chip điện tử trong chìa khóa cũ. Mặt dù cách này không loại trừ hết tất cả các trường hợp.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tháo bình của xe khoảng 5 đến 10 phút rồi kết nối lại saud đó thử khởi động lại xe. Cách này có thể khởi động lại hệ thống Immobiliser/ECU.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nếu tất cả các cách trên không thành công thì cần phải nhờ đến chuyên gia để chẩn đoán.&lt;/p&gt;

&lt;p&gt;Hệ thống Immobiliser hoạt động theo nhiều cách:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ngắt điện HT sau đó sẽ dừng việc đánh lửa của bugi.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ngắt điện từ bơm nhiên liệu&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ngắt điện từ động cơ (mô tơ) khởi động.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tùy vào loại xe mà hệ thống Immobiliser được thiết lập bằng các cách trên hoặc kết hợp nhiều cách ở trên.&lt;/p&gt;

&lt;p&gt;Nếu động cơ hoạt động bình thường thì kỹ sư sẽ phải xem lại tất cả các kết nối liên quan để kiểm tra xem có bất thường nào hay không?&lt;/p&gt;

&lt;p&gt;Tất nhiên vấn đề có thể hoàn toàn không liên quan đến hệ thống Immobiliser và do hệ thống bơm nhiên liệu hoặc đánh lửa hệ thống bị lỗi hoặc chỉ cần một dây điện bị đứt nhưng hầu hết các kỹ sư vẫn sẽ đi về chẩn đoán các lỗi trong cách này. Lựa chọn khác là dùng hệ thống đọc mã lỗi chẩn đoán mà kỹ sư sẽ cắm vào ổ cắm chẩn đoán của xe với thiết bị chuyên dụng và sau đó có thể kiểm tra tất cả các hệ thống trong xe cũng như bất kỳ mã lỗi có thể đã được lưu lại. Các hệ thống chẩn đoán có thể làm lỗi truy tìm dễ dàng hơn.&lt;/p&gt;

&lt;p&gt;Bài gốc: http://www.programyourkeys.com/Car_Won’t_Start.html&lt;/p&gt;
</description>
                <link>http://suakhoabmt.github.io/2015/04/25/xe-khong-the-khoi-dong</link>
                <guid>http://suakhoabmt.github.io/2015/04/25/xe-khong-the-khoi-dong</guid>
                <pubDate>Sat, 25 Apr 2015 00:00:00 +0700</pubDate>
        </item>

        <item>
                <title>Công nghệ chip điện tử xe hơi</title>
                <description>
&lt;p&gt;Công nghệ chip điện tử (Transponder) được sử dụng trong nhiều ứng dụng bảo mật về truy cập và hơn nữa là một tiêu chuẩn của hầu hết phương tiện cơ giới hiện nay.&lt;/p&gt;

&lt;h3 id=&quot;hot-ng-nh-th-no&quot;&gt;Hoạt động như thế nào?&lt;/h3&gt;

&lt;p&gt;Một con chip transponder nhỏ được gắn trong chìa khóa xe của bạn. Khi đưa vào ổ khóa, chip được phát năng lượng bởi một tần số vô tuyến được gửi từ bộ phận đề của khóa. Khi năng lượng chip phát ra một mã số đó được nhận và gửi đến ECU của xe (Electronic Control Unit), còn được gọi là máy tính hoặc não. Nếu mã số đúng thì hệ thống khóa động (Immobilizer) của xe bị vô hiệu hóa và sẽ cho phép chiếc xe khởi động. Nếu không, chiếc xe sẽ vẫn bất động. Tùy thuộc vào hệ thống Immobiliser này có thể hoạt động bằng cách cắt điện áp động cơ khởi động, hoặc các bugi, hoặc bơm nhiên liệu, hoặc một tổ hợp hoặc cả ba.&lt;/p&gt;

&lt;p&gt;If you suspect your key’s transponder chip may be faulty then always try the spare key/s. Another issue can also be with the transponder receiver in the ignition barrel - this should not be overlooked.&lt;/p&gt;

&lt;p&gt;Nếu nghi ngờ chip Transponder của bạn có thể bị lỗi thì hãy thử lại bằng chìa khóa dụ phòng chính của xe. Một vấn đề khác cũng có thể do thiết bị nhận Transponder trong bộ phận đánh lửa - điều này không nên loại trừ.&lt;/p&gt;

&lt;h3 id=&quot;chip-in-t-transponder--u&quot;&gt;Chip điện tử (Transponder) ở đâu?&lt;/h3&gt;

&lt;p&gt;If your vehicle’s key has no opening parts you may think you don’t have a chip in it - not true. As the transponder chip does not require a battery and is energised externally it can be embedded within the plastic mould of the key. On many remote control keys where the key can be opened the transponder chip can be accessed.&lt;/p&gt;

&lt;p&gt;Nếu chìa khóa của xe bạn không có bộ phận để mở ra thì có thể bạn nghĩ rằng chìa khóa không có một con chip trong nó - điều này là không đúng sự thật. Vì chip Transponder không đòi hỏi pin và được cấp năng lượng bên ngoài do đó nó có thể được gắn trong khuôn nhựa của chìa khóa. Trên nhiều chìa khóa điều khiển từ xa mà chip transponder có thể được truy cập.&lt;/p&gt;

&lt;p&gt;Bài gốc: http://www.programyourkeys.com/Transponders.html&lt;/p&gt;
</description>
                <link>http://suakhoabmt.github.io/2015/01/28/cong-nghe-chip-dien-tu-xe-hoi</link>
                <guid>http://suakhoabmt.github.io/2015/01/28/cong-nghe-chip-dien-tu-xe-hoi</guid>
                <pubDate>Wed, 28 Jan 2015 00:00:00 +0700</pubDate>
        </item>

        <item>
                <title>Jekyll Introduction</title>
                <description>
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post’s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy “set”.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another “root” layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation.
What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It’s really unnecessary
&lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website.
The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []()
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;
</description>
                <link>http://suakhoabmt.github.io/lessons/2011/12/29/jekyll-introduction</link>
                <guid>http://suakhoabmt.github.io/lessons/2011/12/29/jekyll-introduction</guid>
                <pubDate>Thu, 29 Dec 2011 00:00:00 +0700</pubDate>
        </item>


</channel>
</rss>
